configfile: "scripts/config/config.yaml",

##### Load the rules #####

rule all:
        input:
                expand("results/fastqc_init/{sample}_fastqc.zip", sample = config["samples"]),
                expand("results/fastqc_init/{sample}_fastqc.html", sample = config["samples"]),
		expand("results/trim/{subsample}_1_trim_paired.fastq.gz", subsample = config["subsamples"]),
		expand("results/trim/{subsample}_1_trim_unpaired.fastq.gz", subsample = config["subsamples"]),
		expand("results/trim/{subsample}_2_trim_paired.fastq.gz", subsample = config["subsamples"]),
		expand("results/trim/{subsample}_2_trim_unpaired.fastq.gz", subsample = config["subsamples"]),
                expand("results/fastqc_post/{sample}_trim_paired_fastqc.zip", sample = config["samples"]),
                expand("results/fastqc_post/{sample}_trim_paired_fastqc.html", sample = config["samples"]),
		expand("results/bowtie2/{subsample}_trim_mapped_sorted_q2.bam", subsample = config["subsamples"]),
                expand("results/bowtie2/{subsample}_trim_mapped_sorted_q2.bam.bai", subsample = config["subsamples"]),
                expand("results/bowtie2/{subsample}.log", subsample = config["subsamples"])

rule fastqc_init:
        input:
                "data/subset/{sample}.fastq.gz"
        output:
                html = "results/fastqc_init/{sample}_fastqc.html",
                zip  = "results/fastqc_init/{sample}_fastqc.zip"
        conda:
                "envs/qc.yaml"
        threads: 2
        log:
                "logs/fastqc_init_{sample}.log"
        message:
                "Executing Initial Quality Control on : {input}"
        shell:
                """
                mkdir -p results/fastqc_init
                fastqc {input} -o "results/fastqc_init" -t {threads} 2>{log}
                """
rule trim:
	input:
		fwd = "data/subset/{subsample}_1.fastq.gz",
		rev = "data/subset/{subsample}_2.fastq.gz"
	output:
		fwd_paired = "results/trim/{subsample}_1_trim_paired.fastq.gz",
		fwd_unpaired = "results/trim/{subsample}_1_trim_unpaired.fastq.gz",
		rev_paired = "results/trim/{subsample}_2_trim_paired.fastq.gz",
		rev_unpaired = "results/trim/{subsample}_2_trim_unpaired.fastq.gz"
	conda:
		"envs/trim.yaml"
	threads: 6
	log: 
		"logs/trim_{subsample}.log"
	message: 
		"Executing Trimming on : {input}"
	shell:
		"""
		mkdir -p results/trim
		java -jar /home/ubuntu/snakemake/trimmomatic-0.38.jar PE -threads {threads} \
		-trimlog results/trim/trim.log -summary results/trim/stats \
		{input.fwd} {input.rev} \
		{output.fwd_paired} {output.fwd_unpaired} {output.rev_paired} {output.rev_unpaired} \
                ILLUMINACLIP:data/NexteraPE-PE.fa:2:30:10:2:keepBothReads \
		LEADING:3 \
                TRAILING:3 \
                SLIDINGWINDOW:4:15 \
                MINLEN:33
		"""


rule fastqc_post:
        input:
                "results/trim/{sample}_trim_paired.fastq.gz"
        output:
                html = "results/fastqc_post/{sample}_trim_paired_fastqc.html",
                zip  = "results/fastqc_post/{sample}_trim_paired_fastqc.zip"
        conda:
                "envs/qc.yaml"
        threads: 2
        log:
                "logs/fastqc_post_{sample}.log"
        message:
                "Executing Initial Quality Control on : {input}"
        shell:
                """
                mkdir -p results/fastqc_init
                fastqc {input} -o "results/fastqc_post" -t {threads} 2>{log}
                """
rule bowtie2:
	input:
		fwd = "results/trim/{subsample}_1_trim_paired.fastq.gz",
		rev = "results/trim/{subsample}_2_trim_paired.fastq.gz",
		idx_bt2 = "/home/ubuntu/snakemake/data/reference/bowtie2"
	output:
		bam = "results/bowtie2/{subsample}_trim_mapped_sorted_q2.bam",
		bai = "results/bowtie2/{subsample}_trim_mapped_sorted_q2.bam.bai",
		log = "results/bowtie2/{subsample}.log"
	conda:
		"envs/bowtie.yaml"
	threads: 8
	log:
		"logs/bowtie2_{subsample}.log"
	message:
		"Executing Mapping on : {input}"
	shell:
		"""
		mkdir -p results/bowtie2
		bowtie2  --very-sensitive -p 8 -k 10  -x {input.idx_bt2}/all  \
		-1 {input.fwd}  -2 {input.rev} | samtools view -q 2 -bS  - | samtools sort - -o {output.bam}
		samtools index -b {output.bam}
		samtools idxstats {output.bam} > {output.log}
		"""
